name: omniedge build in host machine

env:
  APP_NAME: 'omniedge'
  MAINTAINER: 'OmniEdge.io'
  DESC: 'Bring intranet on the internet'

on:
  push:
    tags:
      - 'v*.*.*'
  workflow_dispatch:
    inputs:
      env:
        description: env of the action
        default: prod
        required: false
      tag:
        description: tag ( if tag is not empty, env is always prod)
        required: false

jobs:
  build:
    name: Build on ${{ matrix.platform }}
    env:
      ENVIRONMENT: ${{ github.event.inputs.env || 'dev' }}
      TAG: ${{ github.event.inputs.tag }}
    strategy:
      matrix:
        platform: [ ubuntu-18.04,ubuntu-20.04,ubuntu-22.04,macos-latest ]
    runs-on: ${{ matrix.platform }}
    steps:
      - name: setup env to prod if tag is not empty
        if: ${{ env.TAG }}
        run: |
          echo "ENVIRONMENT=prod" >> $GITHUB_ENV

      - name: Checkout without tag
        if: ${{ !env.TAG }}
        uses: actions/checkout@master

      - name: Checkout with tag
        uses: actions/checkout@master
        if: ${{ env.TAG }}
        with:
          ref: ${{ env.TAG }}

      - name: Show CPU Model and Free Space
        if: ${{ !matrix.platform == 'macos-latest' }}
        run: |
          echo -e "Total CPU cores\t: $(nproc)"
          cat /proc/cpuinfo | grep 'model name'
          free -h

      - name: Show system info
        run: |
          echo -e "system info: $(uname -a)"

      - name: setup golang
        uses: actions/setup-go@v2
        with:
          go-version: '1.16.6'

      - name: go mod download
        run: |
          go mod download

      - name: make
        if: startsWith(matrix.platform, 'ubuntu')
        run: |
          sudo -E apt-get -y update
          sudo -E apt-get install -y openssl
          sudo -E apt-get install -y build-essential
          sudo -E apt-get install -y libssl-dev
          sudo -E apt-get install -y zip upx
          make generate
          BUILD_ENV=${{ env.ENVIRONMENT }} make build
          upx -9 -k ./out/omniedge
          zip -j ./omniedge-${{ github.ref_name }}-${{ matrix.platform }}.zip ./out/omniedge
          sha256sum ./omniedge-${{ github.ref_name }}-${{ matrix.platform }}.zip > ./omniedge-${{ github.ref_name }}-${{ matrix.os }}.zip.sha256
      
      - name: make
        if: startsWith(matrix.platform, 'macos')
        run: |
          brew install autoconf automake libtool coreutils upx
          make generate
          BUILD_ENV=${{ env.ENVIRONMENT }} make build-darwin
          upx -9 -k ./out/omniedge
          zip -j ./omniedge-${{ github.ref_name }}-${{ matrix.platform }}.zip ./out/omniedge
          sha256sum ./omniedge-${{ github.ref_name }}-${{ matrix.platform }}.zip > ./omniedge-${{ github.ref_name }}-${{ matrix.platform }}.zip.sha256
          cat ./omniedge-${{ github.ref_name }}-${{ matrix.platform }}.zip.sha256

      - name: Archive package
        uses: actions/upload-artifact@v2
        with:
          path: omniedge-${{ github.ref_name }}-${{ matrix.platform }}.zip
          name: omniedge-${{ github.ref_name }}-${{ matrix.platform }}.zip
          if-no-files-found: error
          
      - name: Upload package to GitHub Release
        uses: svenstaro/upload-release-action@v2
        if: "startsWith(github.ref, 'refs/tags/')"
        with:
          repo_token: ${{ secrets.GITHUB_TOKEN }}
          file_glob: true
          overwrite: true
          file: omniedge-${{ github.ref_name }}-${{ matrix.platform }}.zip
          tag: ${{ github.ref }}